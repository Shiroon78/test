The time module provides various functions for measuring or sleeping for a specified duration.

Here is the documentation for the time module: https://docs.python.org/3/library/time.


The time.time() function returns the number of seconds that have passed since the Unix epoch, which is January 1st, 1970. This is a floating point number, so you may need to convert it to an integer if you want to use it in a mathematical operation.

For example, if you want to calculate the difference between two points in time, you can subtract the earlier time from the later time:
import time

later_time = time.time()
# do something
earlier_time = time.time()

time_diff = later_time - earlier_time
print(time_diff)

This will print out the number of seconds that have passed since the earlier time.

The time.sleep() function suspends the execution of the current thread for the specified number of seconds. This means that the thread will stop executing and will not continue until the specified number of seconds have passed.

Here is an example of how you can use the time.sleep() function:
import time

def usingWhile():
    while i < 100:
        i = i + 1
        print(i)
        time.sleep(1)

def usingfor():
    for i in range(100):
        print(i)
        time.sleep(1)

usingWhile()
usingfor()

In this example, the usingWhile() function uses a while loop that increments a variable i by 1 and prints it. The time.sleep(1) function is called after each iteration of the loop, which means that the thread will sleep for 1 second before continuing with the next iteration.

The usingfor() function works in a similar way, but it uses a for loop instead.

Here is the code with the requested changes:

```python
import time

def usingWhile():
    while i < 100:
        i = i + 1
        print(i)
        time.sleep(1)

def usingfor():
    for i in range(100):
        print(i)
        time.sleep(1)

usingWhile()
usingfor()

# Convert a time tuple to a string
current_time = time.localtime()
current_time_string = time.strftime("%H:%M:%S", current_time)
print(current_time_string)
```

Convert a time tuple to a string
```python
current_time = time.localtime()
current_time_string = time.strftime("%H:%M:%S", current_time)
print(current_time_string)
```




