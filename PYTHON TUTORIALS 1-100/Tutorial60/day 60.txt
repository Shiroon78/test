In Python, you can define a getter and setter method for a class attribute by using the @property and @property.setter decorators, respectively. Here's an example:
class Person:
    def __init__(self, name):
        self.name = name

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        if not isinstance(value, str):
            raise ValueError("Name must be a string")
        self.__name = value

In this example, we define a Person class with a single attribute, name. We use the @property decorator to define a getter method for the name attribute, and the @name.setter decorator to define a setter method. The getter simply returns the value of the __name private attribute, while the setter ensures that the value assigned to name is a string and sets the value of the __name attribute.

You can now use this class as follows:
person = Person("John")
print(person.name)  # Output: John

person.name = "Jane"
print(person.name)

In Python, you can define a getter method for a class attribute by using the @property decorator. Here's an example:
class Person:
    def __init__(self, name):
        self.name = name

    @property
    def name(self):
        return self.__name

    # Other methods here

In this example, we define a Person class with a single attribute, name. We use the @property decorator to define a getter method for the name attribute. The getter simply returns the value of the __name private attribute.

You can now use this class as follows:
person = Person("John")
print(person.name

